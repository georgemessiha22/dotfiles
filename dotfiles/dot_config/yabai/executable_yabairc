#!/usr/bin/env zsh

YABAIRC="${HOME}/.config/yabai/yabairc"

# helper functions {{{
function get_display_aspect_ratio {
    for x in $(yabai -m query --displays --display mouse | jq 'if type=="array" then .[].frame else .frame end | (.w)/(.h) | floor')
    do
        case $x in
            2)
                echo "ultrawide"
                ;;
            4)
                echo "wide"
                ;;
            *)
                echo "something:whacky"
                ;;
        esac
    done
}

function get_space_num_managed_windows {
	yabai -m query --windows --space mouse |
		jq 'map(select(."is-visible" == true and ."is-floating" == false)) |
    # deal with how hidden applications apparently still
    # have "visible" windows
    if all(."split-type" == "none") then
      1
    else
      map(select(."split-type" != "none")) | length
    end'
}

function maybe_center_space {
	managed_spaces=$(get_space_num_managed_windows)

    for aspect_ratio in $(get_display_aspect_ratio)
    do
        if [[ $aspect_ratio == "ultrawide" ]]; then
            if ((managed_spaces < 1)); then 
                yabai -m space --padding abs:3:60:800:800
            elif ((managed_spaces < 4)); then
                yabai -m space --padding abs:3:60:400:400
            else
                yabai -m space --padding abs:3:60:3:3
            fi
        elif [[ $aspect_ratio == "wide" ]]; then
            if ((managed_spaces < 1)); then
                yabai -m space --padding abs:3:3:600:600
            elif ((managed_spaces < 4)); then
                yabai -m space --padding abs:3:3:300:300
            else
                yabai -m space --padding abs:3:3:3:3
            fi
        else
            yabai -m space --padding abs:3:3:3:3
        fi
    done
}

function add_rule {
	yabai -m rule --add "$@"
	yabai -m rule --apply "$@"
}

function config_rules {
	# Application specific rules
	yabai -m rule --add app=SideNotes manage=off
	yabai -m rule --add app=Session manage=off
	yabai -m rule --add app=Slidepad manage=off

	yabai -m rule --add app="^System Settings$" manage=off
	yabai -m rule --add app="^Calculator$" manage=off
	yabai -m rule --add app="^Karabiner-Elements$" manage=off
	yabai -m rule --add app="^Keymapp" manage=off

	# Default Spaces

	add_rule app="^Slack" space=1 manage=on
	add_rule app="^Google Chrome" space=2 manage=on
	add_rule app="^Alacritty" space=3 manage=on
	add_rule app="^Ghostty" space=3 manage=on
	add_rule app="^Spotify" space=5 manage=on
}

function config_signals {
	for signal in application_launched application_terminated application_hidden application_visible window_created window_destroyed window_minimized window_deminimized space_changed display_resized display_changed display_added display_removed system_woke; do
		yabai -m signal --add event="$signal" \
			action="$YABAIRC maybe_center_space" \
			label="maybe_center_space-on-$signal"
	done

	yabai -m signal --add event=window_focused action="sketchybar -m --trigger window_focus &> /dev/null"
	yabai -m signal --add event=window_title_changed action="sketchybar -m --trigger title_change &> /dev/null"
	# yabai -m signal --add event=window_created action"$YABAIRC config_rules"
}
# }}}

function config_main {
	
	# ref https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)#configure-scripting-addition
	yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
	sudo yabai --load-sa
	
	# default layout (can be bsp, stack or float)
	yabai -m config layout bsp

	# New window spawns to the right if vertical split, or bottom if horizontal split
	yabai -m config window_placement second_child

	# leave space for sketchybar on external screen without notch
	yabai -m config external_bar all:33:0

	# Auto balance makes it so all windows always occupy the same space, independent of how deeply nested they are in the window tree. When a new window is inserted or a window is removed, the split ratios will be automatically adjusted.
	yabai -m config auto_balance on

	yabai -m config debug_output off

	yabai -m config window_shadow off
	yabai -m config window_opacity on
	yabai -m config active_window_opacity        1.0
	yabai -m config normal_window_opacity        0.8

	# yabai -m config window_border_width 5
	# yabai -m config window_border on
	# yabai -m config active_window_border_color 0xff8CABC8
	# yabai -m config normal_window_border_color 0xff434c5e
	# yabai -m config insert_feedback_color 0xffd75f5f
	
	# center mouse on window with focus
	yabai -m config mouse_follows_focus on

	# modifier for clicking and dragging with mouse
	yabai -m config mouse_modifier fn
	# set modifier + left-click drag to move window
	yabai -m config mouse_action1 move
	# set modifier + right-click drag to resize window
	yabai -m config mouse_action2 resize

	# set focus follows mouse mode (default: off, options: off, autoraise, autofocus)
	yabai -m config focus_follows_mouse autofocus

	config_rules

	# spaces between window
	yabai -m config window_gap 3

	# Dynamic left & right gaps on wide screen & Paddings {{{
	maybe_center_space
	config_signals
	# }}}
}

function setup_space {
	local idx="$1"
	local name="$2"
	local space=
	echo "setup space $idx : $name"

	space=$(yabai -m query --spaces --space "$idx")
	if [ "$space" = "" ]; then
		yabai -m space --create
	fi

	yabai -m space "$idx" --label "$name"
}

if [[ $# == 0 ]]; then
	config_main
else
	"$1"
fi
